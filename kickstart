#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if project name provided
if [ $# -eq 0 ]; then
    print_error "Please provide a project name"
    echo "Usage: ./kickstart \"My Awesome Project\""
    exit 1
fi

PROJECT_NAME="$1"
PROJECT_SLUG=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr '_' '-')

# Check if this looks like an already-initialized project
if [ -f "./.claude/CLAUDE.md" ] && [ ! -f "./CLAUDE.md.template" ]; then
    print_error "This project appears already initialized!"
    print_status "Use individual Claude commands instead of kickstart"
    exit 1
fi

print_status "ðŸš€ Initializing project: $PROJECT_NAME"
echo

# Replace placeholders in all relevant files
print_status "Updating project name and details..."
find . -type f \( -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \) | while read -r file; do
    if grep -q "{{" "$file" 2>/dev/null; then
        sed -i.bak \
            -e "s|{{PROJECT_NAME}}|$PROJECT_NAME|g" \
            -e "s|{{PROJECT_SLUG}}|$PROJECT_SLUG|g" \
            -e "s|{{CURRENT_DATE}}|$(date +%Y-%m-%d)|g" \
            "$file"
        rm -f "$file.bak"
        print_status "Updated: $file"
    fi
done

# Create docs directory
mkdir -p ./docs

# Initialize Claude Code
print_status "Initializing Claude Code..."
if command -v claude &> /dev/null; then
    claude init
    print_success "Claude Code initialized"
    
    # Move CLAUDE.md to correct location if it was created in root
    if [ -f "./CLAUDE.md" ] && [ ! -f "./.claude/CLAUDE.md" ]; then
        mv "./CLAUDE.md" "./.claude/CLAUDE.md"
        print_success "Moved CLAUDE.md to .claude/ directory"
    fi
    
    # Use our template for CLAUDE.md if available
    if [ -f "./CLAUDE.md.template" ]; then
        cp "./CLAUDE.md.template" "./.claude/CLAUDE.md"
        print_success "Enhanced CLAUDE.md with project template"
    elif [ -f "./templates/CLAUDE.md.template" ]; then
        cp "./templates/CLAUDE.md.template" "./.claude/CLAUDE.md"
        print_success "Enhanced CLAUDE.md with project template"
    fi
else
    print_warning "Claude CLI not found. Please install Claude Code and run 'claude init' manually"
    # Fallback: use our template
    if [ -f "./CLAUDE.md.template" ]; then
        mkdir -p .claude
        cp "./CLAUDE.md.template" "./.claude/CLAUDE.md"
        print_success "Created CLAUDE.md from template"
    elif [ -f "./templates/CLAUDE.md.template" ]; then
        mkdir -p .claude
        cp "./templates/CLAUDE.md.template" "./.claude/CLAUDE.md"
        print_success "Created CLAUDE.md from template"
    fi
fi

echo
print_success "ðŸŽ‰ Project initialization complete!"
echo
print_status "Next steps:"
echo "  1. Add your PRD.md and TechnicalArchitecture.md files to the docs/ directory"
echo "  2. Run bootstrap command to create GitHub issues: claude --file .claude/commands/bootstrap.md"
echo "  3. Start development with: claude --file .claude/commands/work.md"
echo
print_status "Available commands in .claude/commands/:"
if [ -d "./.claude/commands" ]; then
    ls ./.claude/commands/*.md 2>/dev/null | sed 's|./.claude/commands/||' | sed 's|.md||' | sed 's/^/  - /'
fi